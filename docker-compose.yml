version: '3.8'

services:

  postgres:
    image: postgres:15.1-alpine
    restart: always
    container_name: postgres
    expose:
      - "5432"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env_docker
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 20s
      retries: 5  

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: django
    command: >
      /bin/sh -c "
      python manage.py migrate &&
      python manage.py search_index --rebuild -f &&
      python manage.py runserver 0.0.0.0:80"
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    ports:
      - "8000:80"

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env_docker
    command: ["celery", "-A", "main", "worker", "--loglevel=info"]
    depends_on:
      - rabbitmq
      - postgres
    volumes:
      - .:/app

  flower:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env_docker
    command: ["celery", "-A", "main", "flower", "--port=5555"]
    ports:
      - "5555:5555"
    depends_on:
      - rabbitmq
      - celery


volumes:
  postgres_data:
  esdata:
    driver: local
